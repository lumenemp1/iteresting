UnicodeEncodeError: 'utf-8' codec can't encode characters in position 0-1: surrogates not allowed
Traceback:
File "C:\Users\AD54619\Text2Sql\location\sdp_analysis.py", line 140, in <module>
    main()
File "C:\Users\AD54619\Text2Sql\location\sdp_analysis.py", line 84, in main
    st.title("\ud83d\udcca SDP Analytics Dashboard")
File "C:\Users\AD54619\Text2Sql\new_env\Lib\site-packages\streamlit\runtime\metrics_util.py", line 444, in wrapped_func
    result = non_optional_func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\AD54619\Text2Sql\new_env\Lib\site-packages\streamlit\elements\heading.py", line 239, in title
    HeadingMixin._create_heading_proto(
File "C:\Users\AD54619\Text2Sql\new_env\Lib\site-packages\streamlit\elements\heading.py", line 280, in _create_heading_proto
    proto.body =











































import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Plot from 'react-plotly.js';
import clsx from 'clsx';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, TrendingUp, ArrowLeft } from 'lucide-react';

const TrendAnalysis = () => {
  const [summaryData, setSummaryData] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [detailData, setDetailData] = useState(null);
  const [search, setSearch] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isDetailLoading, setIsDetailLoading] = useState(false);
  const [sourceSystem, setSourceSystem] = useState('eon');

  const fetchSummary = async () => {
    setIsLoading(true);
    try {
      const response = await axios.post('http://localhost:5000/analysis/summary', {
        source_system: sourceSystem,
        analysis_type: 'trend_analysis'
      });
      setSummaryData(response.data);
    } catch (error) {
      console.error('Error fetching summary:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchDetail = async (product, range) => {
    setIsDetailLoading(true);
    try {
      const response = await axios.post('http://localhost:5000/analysis/detail', {
        source_system: sourceSystem,
        analysis_type: 'trend_analysis',
        product,
        time_range: range
      });
      setDetailData(response.data);
    } catch (error) {
      console.error('Error fetching detail:', error);
    } finally {
      setIsDetailLoading(false);
    }
  };

  useEffect(() => {
    fetchSummary();
  }, [sourceSystem]);

  const handleProductClick = (product) => {
    setSelectedProduct(product);
    fetchDetail(product, '1m');
  };

  const handleTimeRangeChange = (range) => {
    if (selectedProduct) {
      fetchDetail(selectedProduct, range);
    }
  };

  const renderSparkline = (data, color) => (
    <div className="h-8 w-full">
      <Plot
        data={[{
          x: data.map(d => d.date),
          y: data.map(d => d.total_orders),
          type: 'scatter',
          mode: 'lines',
          line: { color, width: 2 },
          hoverinfo: 'skip'
        }]}
        layout={{
          margin: { l: 0, r: 0, t: 0, b: 0 },
          xaxis: { visible: false },
          yaxis: { visible: false },
          height: 32,
          paper_bgcolor: 'transparent',
          plot_bgcolor: 'transparent'
        }}
        config={{ displayModeBar: false, responsive: true }}
        style={{ width: '100%', height: '100%' }}
        key={`sparkline-${Date.now()}`}
      />
    </div>
  );

  const filteredData = summaryData.filter(item =>
    item.product.toLowerCase().includes(search.toLowerCase())
  );

  if (selectedProduct && detailData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          {/* Header Section */}
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-3 rounded-lg">
                  <TrendingUp className="h-6 w-6" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-gray-800">Product Sales Trend Dashboard</h1>
                  <p className="text-gray-600 mt-1">Analyzing trends for {sourceSystem.toUpperCase()} system</p>
                </div>
              </div>
            </div>
          </div>

          {/* Detail View Container */}
          <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
            {/* Detail Header */}
            <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <Button
                    variant="ghost"
                    onClick={() => {
                      setSelectedProduct(null);
                      setDetailData(null);
                    }}
                    className="text-white hover:bg-white/20 px-3 py-2"
                  >
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    Back to Overview
                  </Button>
                  <div className="h-6 w-px bg-white/30"></div>
                  <h2 className="text-2xl font-bold">{detailData.product}</h2>
                </div>
              </div>
            </div>

            {/* Detail Content */}
            <div className="p-6 space-y-6">
              <Tabs defaultValue="1m" onValueChange={handleTimeRangeChange}>
                <TabsList className="grid w-full grid-cols-4 bg-gray-100">
                  <TabsTrigger value="1w" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">1 Week</TabsTrigger>
                  <TabsTrigger value="1m" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">1 Month</TabsTrigger>
                  <TabsTrigger value="1y" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">1 Year</TabsTrigger>
                  <TabsTrigger value="2y" className="data-[state=active]:bg-white data-[state=active]:shadow-sm">2 Years</TabsTrigger>
                </TabsList>

                {['1w', '1m', '1y', '2y'].map((timeRange) => (
                  <TabsContent key={timeRange} value={timeRange} className="space-y-6 mt-6">
                    {isDetailLoading ? (
                      <div className="flex items-center justify-center h-64">
                        <div className="text-center space-y-4">
                          <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent mx-auto"></div>
                          <p className="text-gray-600 font-medium">Loading detailed analysis...</p>
                        </div>
                      </div>
                    ) : (
                      <>
                        {/* Metrics Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                          <div className="bg-gradient-to-br from-green-50 to-emerald-100 rounded-lg p-6 border border-green-200">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-green-700 mb-1">Total Sales</p>
                                <p className="text-3xl font-bold text-green-800">{detailData.total_sales?.toLocaleString() || 0}</p>
                              </div>
                              <div className="bg-green-500 text-white p-3 rounded-lg">
                                📈
                              </div>
                            </div>
                          </div>
                          
                          <div className="bg-gradient-to-br from-blue-50 to-cyan-100 rounded-lg p-6 border border-blue-200">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-blue-700 mb-1">Avg Daily Sales</p>
                                <p className="text-3xl font-bold text-blue-800">{detailData.avg_sales?.toLocaleString() || 0}</p>
                              </div>
                              <div className="bg-blue-500 text-white p-3 rounded-lg">
                                📊
                              </div>
                            </div>
                          </div>
                          
                          <div className="bg-gradient-to-br from-purple-50 to-indigo-100 rounded-lg p-6 border border-purple-200">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-purple-700 mb-1">Trend Analysis</p>
                                <p className="text-2xl font-bold text-purple-800">{detailData.trend_description || 'N/A'}</p>
                                <p className={`text-sm font-medium mt-1 ${detailData.trend_percent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                  {detailData.trend_percent ? `${detailData.trend_percent.toFixed(1)}% per day` : ''}
                                </p>
                              </div>
                              <div className="bg-purple-500 text-white p-3 rounded-lg">
                                📉
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Chart Section */}
                        <div className="bg-gray-50 rounded-xl p-6 border">
                          <div className="bg-white rounded-lg p-4 shadow-sm">
                            <Plot
                              data={[
                                {
                                  x: detailData.chart_data?.dates || [],
                                  y: detailData.chart_data?.actual || [],
                                  type: 'scatter',
                                  mode: 'lines+markers',
                                  name: 'Daily Orders',
                                  line: { 
                                    color: (detailData.trend_percent || 0) < 0 ? '#ef4444' : '#10b981',
                                    width: 3 
                                  },
                                  marker: { size: 8, color: (detailData.trend_percent || 0) < 0 ? '#ef4444' : '#10b981' }
                                }
                              ]}
                              layout={{
                                title: {
                                  text: `${detailData.product?.toUpperCase()} - ${timeRange.toUpperCase()} Analysis`,
                                  font: { size: 18, family: 'Arial, sans-serif' }
                                },
                                xaxis: { 
                                  title: { text: 'Date', font: { size: 14 } },
                                  gridcolor: '#f3f4f6'
                                },
                                yaxis: { 
                                  title: { text: 'Orders', font: { size: 14 } },
                                  gridcolor: '#f3f4f6'
                                },
                                height: 450,
                                legend: { 
                                  orientation: 'h', 
                                  yanchor: 'bottom', 
                                  y: 1.02, 
                                  xanchor: 'right', 
                                  x: 1 
                                },
                                plot_bgcolor: '#fafafa',
                                paper_bgcolor: 'white',
                                margin: { l: 70, r: 40, t: 80, b: 70 }
                              }}
                              config={{ responsive: true, displayModeBar: true }}
                              style={{ width: '100%', height: '450px' }}
                              key={`detail-plot-${timeRange}`}
                            />
                          </div>
                        </div>
                      </>
                    )}
                  </TabsContent>
                ))}
              </Tabs>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header Section */}
        <div className="bg-white rounded-xl shadow-sm border p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-3 rounded-lg">
                <TrendingUp className="h-6 w-6" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-800">Product Sales Trend Dashboard</h1>
                <p className="text-gray-600 mt-1">Monitor and analyze product performance trends</p>
              </div>
            </div>
          </div>
        </div>

        {/* Controls Section */}
        <div className="bg-white rounded-xl shadow-sm border p-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            {/* Source System Selection */}
            <div className="flex items-center space-x-4">
              <label className="text-sm font-semibold text-gray-700 whitespace-nowrap">
                Data Source:
              </label>
              <select
                value={sourceSystem}
                onChange={(e) => {
                  setSourceSystem(e.target.value);
                  setIsLoading(true);
                  setSelectedProduct(null);
                  setDetailData(null);
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white font-medium"
              >
                <option value="eon">EON System</option>
                <option value="sdp">SDP System</option>
                <option value="orion">ORION System</option>
              </select>
            </div>

            {/* Search */}
            <div className="relative max-w-md w-full lg:w-auto">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search products..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="pl-10 border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        {/* Content Section */}
        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-800">All Product Trends (1 Month Overview)</h2>
            <p className="text-gray-600 mt-1">Click on any product card to view detailed analysis</p>
          </div>

          <div className="p-6">
            {isLoading ? (
              <div className="flex items-center justify-center h-64">
                <div className="text-center space-y-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent mx-auto"></div>
                  <p className="text-gray-600 font-medium">Loading product data...</p>
                </div>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {filteredData.map((item, index) => {
                  const trendColor = (item.trend_percent || 0) >= 0 ? 'text-green-600' : 'text-red-600';
                  const sparklineColor = (item.trend_percent || 0) >= 0 ? '#10b981' : '#ef4444';
                  
                  return (
                    <div
                      key={index}
                      className="border border-gray-200 rounded-lg p-4 cursor-pointer transition-all duration-200 bg-white hover:shadow-md hover:border-gray-300"
                      onClick={() => handleProductClick(item.product)}
                    >
                      <div className="space-y-3">
                        {/* Product Name */}
                        <h3 className="font-semibold text-sm text-gray-800 line-clamp-2 leading-tight">{item.product}</h3>
                        
                        {/* Sales Info */}
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500">Total Sales</span>
                          <span className="font-semibold text-sm text-gray-800">{item.total_sales?.toLocaleString() || 0}</span>
                        </div>
                        
                        {/* Trend Info */}
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500">Trend</span>
                          <div className="text-right">
                            <div className={`font-medium text-xs ${trendColor}`}>{item.trend_description}</div>
                            <div className={`text-xs ${trendColor}`}>({item.trend_percent?.toFixed(1)}%)</div>
                          </div>
                        </div>
                        
                        {/* Sparkline */}
                        {item.sparkline_data && (
                          <div className="bg-gray-50 rounded px-2 py-1">
                            {renderSparkline(item.sparkline_data, sparklineColor)}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}

            {filteredData.length === 0 && !isLoading && (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">🔍</div>
                <h3 className="text-xl font-semibold text-gray-800 mb-2">No products found</h3>
                <p className="text-gray-600">Try adjusting your search terms or check the selected data source</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TrendAnalysis;






















# trend_analysis.py
import pandas as pd
import numpy as np
from scipy import stats

import os
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SOURCE_FILE_MAP = {
    "eon": os.path.join(BASE_DIR, "sorted_file.xlsx"),
    "sdp": os.path.join(BASE_DIR, "sorted_file_sdp.xlsx"),
    "orion": os.path.join(BASE_DIR, "sorted_file_orion.xlsx")
}

def get_valid_sources():
    return list(SOURCE_FILE_MAP.keys())

def load_data(source_system):
    if source_system not in SOURCE_FILE_MAP:
        raise ValueError(f"Unknown source system: {source_system}")
    path = SOURCE_FILE_MAP[source_system]
    df = pd.read_excel(path)
    df['date'] = pd.to_datetime(df['date'])
    return df

def generate_summary(source_system):
    df = load_data(source_system)
    reference_date = df['date'].max()
    preview_period = reference_date - pd.Timedelta(days=30)
    results = []

    for product in sorted(df['product'].unique()):
        product_data = df[df['product'] == product]
        period_data = product_data[(product_data['date'] >= preview_period) & (product_data['date'] <= reference_date)].sort_values('date')

        if period_data.empty or len(period_data) < 2:
            continue

        total_sales = period_data['total_orders'].sum()
        avg_sales = period_data['total_orders'].mean()
        x = np.arange(len(period_data))
        y = period_data['total_orders'].values

        slope, _, r_value, _, _ = stats.linregress(x, y)
        norm_slope = (slope / avg_sales * 100) if avg_sales > 0 else 0

        if abs(norm_slope) < 2:
            trend_icon, color, desc = '➡️', 'blue', 'Stable'
        elif norm_slope > 0:
            trend_icon, color, desc = ('⬆️', 'green', 'Upward') if norm_slope > 10 else ('↗️', 'green', 'Slight Upward')
        else:
            trend_icon, color, desc = ('⬇️', 'red', 'Downward') if norm_slope < -10 else ('↘️', 'red', 'Slight Downward')

        sparkline = period_data[['date', 'total_orders']].copy()
        results.append({
            "product": product,
            "total_sales": int(total_sales),
            "avg_sales": round(avg_sales, 1),
            "trend_percent": round(norm_slope, 1),
            "trend_description": desc,
            "trend_icon": trend_icon,
            "color": color,
            "r_squared": round(r_value**2, 2),
            "sparkline_data": sparkline.to_dict(orient="records")
        })

    return sorted(results, key=lambda x: x["trend_percent"], reverse=True)

def generate_detail(source_system, product, time_delta):
    df = load_data(source_system)
    reference_date = df['date'].max()
    start_date = reference_date - time_delta

    product_data = df[(df['product'] == product) & (df['date'] >= start_date)].sort_values('date')
    if product_data.empty:
        raise ValueError("No data for product in this range")

    total_sales = product_data['total_orders'].sum()
    avg_sales = product_data['total_orders'].mean()
    x = np.arange(len(product_data))
    y = product_data['total_orders'].values

    if len(x) > 1:
        slope, intercept, r_value, _, _ = stats.linregress(x, y)
        trend_y = (slope * x + intercept).tolist()
        norm_slope = (slope / avg_sales * 100) if avg_sales > 0 else 0

        if abs(norm_slope) < 2:
            desc = "Stable"
        elif norm_slope > 0:
            desc = "Upward" if norm_slope > 10 else "Slight Upward"
        else:
            desc = "Downward" if norm_slope < -10 else "Slight Downward"
    else:
        trend_y = []
        norm_slope = 0
        r_value = 0
        desc = "Insufficient Data"

    return {
        "product": product,
        "time_range_days": time_delta.days,
        "total_sales": int(total_sales),
        "avg_sales": round(avg_sales, 1),
        "trend_percent": round(norm_slope, 1),
        "trend_description": desc,
        "r_squared": round(r_value**2, 2),
        "chart_data": {
            "dates": product_data["date"].dt.strftime("%Y-%m-%d").tolist(),
            "actual": product_data["total_orders"].tolist(),
            "trendline": trend_y
        }
    }







































print(df['Cluster_classification'].unique())
['High-Moving' 'Avg.-Moving' 'Very-Low-Moving' 'Low-Moving' 'Obsolete']












# trend_analysis.py
import pandas as pd
import numpy as np
from scipy import stats

import os
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SOURCE_FILE_MAP = {
    "eon": os.path.join(BASE_DIR, "sorted_file.xlsx"),
    "sdp": os.path.join(BASE_DIR, "sorted_file_sdp.xlsx"),
    "orion": os.path.join(BASE_DIR, "sorted_file_orion.xlsx")
}

def get_valid_sources():
    return list(SOURCE_FILE_MAP.keys())

def load_data(source_system):
    if source_system not in SOURCE_FILE_MAP:
        raise ValueError(f"Unknown source system: {source_system}")
    path = SOURCE_FILE_MAP[source_system]
    df = pd.read_excel(path)
    df['date'] = pd.to_datetime(df['date'])
    return df

def generate_summary(source_system):
    df = load_data(source_system)
    reference_date = df['date'].max()
    preview_period = reference_date - pd.Timedelta(days=30)
    results = []

    for product in sorted(df['product'].unique()):
        product_data = df[df['product'] == product]
        period_data = product_data[(product_data['date'] >= preview_period) & (product_data['date'] <= reference_date)].sort_values('date')

        if period_data.empty or len(period_data) < 2:
            continue

        total_sales = period_data['total_orders'].sum()
        avg_sales = period_data['total_orders'].mean()
        x = np.arange(len(period_data))
        y = period_data['total_orders'].values

        slope, _, r_value, _, _ = stats.linregress(x, y)
        norm_slope = (slope / avg_sales * 100) if avg_sales > 0 else 0

        if abs(norm_slope) < 2:
            trend_icon, color, desc = '➡️', 'blue', 'Stable'
        elif norm_slope > 0:
            trend_icon, color, desc = ('⬆️', 'green', 'Upward') if norm_slope > 10 else ('↗️', 'green', 'Slight Upward')
        else:
            trend_icon, color, desc = ('⬇️', 'red', 'Downward') if norm_slope < -10 else ('↘️', 'red', 'Slight Downward')

        sparkline = period_data[['date', 'total_orders']].copy()
        results.append({
            "product": product,
            "total_sales": int(total_sales),
            "avg_sales": round(avg_sales, 1),
            "trend_percent": round(norm_slope, 1),
            "trend_description": desc,
            "trend_icon": trend_icon,
            "color": color,
            "r_squared": round(r_value**2, 2),
            "sparkline_data": sparkline.to_dict(orient="records")
        })

    return sorted(results, key=lambda x: x["trend_percent"], reverse=True)

def generate_detail(source_system, product, time_delta):
    df = load_data(source_system)
    reference_date = df['date'].max()
    start_date = reference_date - time_delta

    product_data = df[(df['product'] == product) & (df['date'] >= start_date)].sort_values('date')
    if product_data.empty:
        raise ValueError("No data for product in this range")

    total_sales = product_data['total_orders'].sum()
    avg_sales = product_data['total_orders'].mean()
    x = np.arange(len(product_data))
    y = product_data['total_orders'].values

    if len(x) > 1:
        slope, intercept, r_value, _, _ = stats.linregress(x, y)
        trend_y = (slope * x + intercept).tolist()
        norm_slope = (slope / avg_sales * 100) if avg_sales > 0 else 0

        if abs(norm_slope) < 2:
            desc = "Stable"
        elif norm_slope > 0:
            desc = "Upward" if norm_slope > 10 else "Slight Upward"
        else:
            desc = "Downward" if norm_slope < -10 else "Slight Downward"
    else:
        trend_y = []
        norm_slope = 0
        r_value = 0
        desc = "Insufficient Data"

    return {
        "product": product,
        "time_range_days": time_delta.days,
        "total_sales": int(total_sales),
        "avg_sales": round(avg_sales, 1),
        "trend_percent": round(norm_slope, 1),
        "trend_description": desc,
        "r_squared": round(r_value**2, 2),
        "chart_data": {
            "dates": product_data["date"].dt.strftime("%Y-%m-%d").tolist(),
            "actual": product_data["total_orders"].tolist(),
            "trendline": trend_y
        }
    }






































i am getting minus values sometimes in demand forecasting , is that normal

import pandas as pd

from prophet import Prophet

from datetime import timedelta

import os



# ---------- CONFIG ----------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

SOURCE_FILE_MAP = {

    "eon": os.path.join(BASE_DIR, "sorted_file.xlsx"),

    "sdp": os.path.join(BASE_DIR, "sorted_file_sdp.xlsx"),

    "orion": os.path.join(BASE_DIR, "sorted_file_orion.xlsx"),

}



# ---------- LOAD DATA ----------

def load_data(source_system):

    if source_system not in SOURCE_FILE_MAP:

        raise ValueError(f"Unknown source system: {source_system}")

   

    df = pd.read_excel(SOURCE_FILE_MAP[source_system])

    df.rename(columns={"date": "ds", "total_orders": "y", "product": "product_name"}, inplace=True)

    df["ds"] = pd.to_datetime(df["ds"])

    return df



def get_all_products_eon():

    df = load_data("eon")

    return sorted(df['product_name'].unique().tolist())



# ---------- SUMMARY (PRODUCT LIST) ----------

def get_forecast_summary(source_system):

    df = load_data(source_system)

    return sorted(df['product_name'].unique())







# ---------- DETAILED FORECAST (PER PRODUCT) ----------

def get_forecast_detail(source_system, product):

    df = load_data(source_system)

    df_prod = df[df["product_name"] == product][["ds", "y"]].copy()



    if df_prod.shape[0] >= 60 and df_prod["y"].sum() >= 10:

        model = Prophet(daily_seasonality=True, yearly_seasonality=True)

        model.fit(df_prod)



        future = model.make_future_dataframe(periods=30)

        forecast = model.predict(future)



        forecast = forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].copy()

    else:

        mean_y = df_prod.tail(30)["y"].mean() if df_prod.shape[0] >= 30 else df_prod["y"].mean()

        last_date = df_prod["ds"].max() if not df_prod.empty else pd.to_datetime("2025-05-15")

        future_dates = pd.date_range(start=last_date + timedelta(days=1), periods=30)



        forecast = pd.DataFrame({

            "ds": future_dates,

            "yhat": [mean_y] * 30,

            "yhat_lower": [mean_y * 0.9] * 30,

            "yhat_upper": [mean_y * 1.1] * 30,

        })



    # Filter to only return next 30 days

    latest_cutoff = forecast["ds"].max() - timedelta(days=29)

    df_selected = forecast[forecast["ds"] >= latest_cutoff]



    return {

        "product": product,

        "total_forecast": round(df_selected["yhat"].sum(), 2),

        "forecast_data": df_selected.to_dict(orient="records")

    }



{

    "forecast_data": [

        {

            "ds": "Sat, 31 May 2025 00:00:00 GMT",

            "yhat": 310.2238156311754,

            "yhat_lower": -1401.084000970811,

            "yhat_upper": 2079.588646405013

        },

        {

            "ds": "Sun, 01 Jun 2025 00:00:00 GMT",

            "yhat": -84.50095541129497,

            "yhat_lower": -1767.336655644267,

            "yhat_upper": 1615.5839446078126

        },

        {

            "ds": "Mon, 02 Jun 2025 00:00:00 GMT",

            "yhat": -43.6376619643338,

            "yhat_lower": -1779.0427272249658,

            "yhat_upper": 1640.576699672727

        },

        {

            "ds": "Tue, 03 Jun 2025 00:00:00 GMT",

            "yhat": -20.070107950584656,

            "yhat_lower": -1777.5516475738932,

            "yhat_upper": 1641.8145037787199

        },

        {

            "ds": "Wed, 04 Jun 2025 00:00:00 GMT",

            "yhat": -219.7026550536068,

            "yhat_lower": -1969.266476716409,

            "yhat_upper": 1517.199089122539

        },

        {

            "ds": "Thu, 05 Jun 2025 00:00:00 GMT",

            "yhat": 126.83202542038453,

            "yhat_lower": -1487.14672291081,

            "yhat_upper": 1887.777780643024

        },

        {

            "ds": "Fri, 06 Jun 2025 00:00:00 GMT",

            "yhat": -157.26828992629942,

            "yhat_lower": -1989.1385176197584,

            "yhat_upper": 1611.4446187811823

        },

        {

            "ds": "Sat, 07 Jun 2025 00:00:00 GMT",

            "yhat": 190.93385355346493,

            "yhat_lower": -1589.53020362097,

            "yhat_upper": 1996.927941377974

        },

        {

            "ds": "Sun, 08 Jun 2025 00:00:00 GMT",

            "yhat": -186.63463367143248,

            "yhat_lower": -1927.7711351338166,

            "yhat_upper": 1509.7722245296684

        },

        {

            "ds": "Mon, 09 Jun 2025 00:00:00 GMT",

            "yhat": -128.25736431368819,

            "yhat_lower": -1750.3911045379189,

            "yhat_upper": 1476.1125769040636

        },

        {

            "ds": "Tue, 10 Jun 2025 00:00:00 GMT",

            "yhat": -87.25173195437048,

            "yhat_lower": -1868.9549572112812,

            "yhat_upper": 1519.431722239531

        },

        {

            "ds": "Wed, 11 Jun 2025 00:00:00 GMT",

            "yhat": -269.9342757528007,

            "yhat_lower": -2011.891845306485,

            "yhat_upper": 1481.621560595091

        },

        {

            "ds": "Thu, 12 Jun 2025 00:00:00 GMT",

            "yhat": 92.68252078494265,

            "yhat_lower": -1476.6978573276292,

            "yhat_upper": 1776.4659543800808

        },

        {

            "ds": "Fri, 13 Jun 2025 00:00:00 GMT",

            "yhat": -176.54124940196436,

            "yhat_lower": -1906.1354520256211,

            "yhat_upper": 1556.872945113012

        },

        {

            "ds": "Sat, 14 Jun 2025 00:00:00 GMT",

            "yhat": 185.0446211961107,

            "yhat_lower": -1533.3539865862408,

            "yhat_upper": 1816.0531893025059

        },

        {

            "ds": "Sun, 15 Jun 2025 00:00:00 GMT",

            "yhat": -180.86313469447254,

            "yhat_lower": -1857.7726401337254,

            "yhat_upper": 1512.21982772624

        },

        {

            "ds": "Mon, 16 Jun 2025 00:00:00 GMT",

            "yhat": -112.71644880369331,

            "yhat_lower": -1711.022134542183,

            "yhat_upper": 1640.7336798538886

        },

        {

            "ds": "Tue, 17 Jun 2025 00:00:00 GMT",

            "yhat": -63.936341531872586,

            "yhat_lower": -1751.7324190085365,

            "yhat_upper": 1477.5017360330899

        },

        {

            "ds": "Wed, 18 Jun 2025 00:00:00 GMT",

            "yhat": -240.8774626611712,

            "yhat_lower": -2002.1688929434395,

            "yhat_upper": 1541.821072471627

        },

        {

            "ds": "Thu, 19 Jun 2025 00:00:00 GMT",

            "yhat": 125.47393089661387,

            "yhat_lower": -1562.7003596293703,

            "yhat_upper": 1769.5157903576478

        },

        {

            "ds": "Fri, 20 Jun 2025 00:00:00 GMT",

            "yhat": -141.93462033404387,

            "yhat_lower": -1904.4081398299754,

            "yhat_upper": 1519.3045864844041

        },

        {

            "ds": "Sat, 21 Jun 2025 00:00:00 GMT",

            "yhat": 219.69082897838985,

            "yhat_lower": -1428.196370774249,

            "yhat_upper": 1970.9728558301574

        },

        {

            "ds": "Sun, 22 Jun 2025 00:00:00 GMT",

            "yhat": -147.7595299345246,

            "yhat_lower": -1884.266446026439,

            "yhat_upper": 1571.235181743989

        },

        {

            "ds": "Mon, 23 Jun 2025 00:00:00 GMT",

            "yhat": -82.5024348156777,

            "yhat_lower": -1768.7041079204078,

            "yhat_upper": 1680.0710761700107

        },

        {

            "ds": "Tue, 24 Jun 2025 00:00:00 GMT",

            "yhat": -37.691113780177716,

            "yhat_lower": -1667.0897652669753,

            "yhat_upper": 1734.5486454004038

        },

        {

            "ds": "Wed, 25 Jun 2025 00:00:00 GMT",

            "yhat": -219.38981897710363,

            "yhat_lower": -1998.7460263318887,

            "yhat_upper": 1524.8304816069353

        },

        {

            "ds": "Thu, 26 Jun 2025 00:00:00 GMT",

            "yhat": 141.7176666144304,

            "yhat_lower": -1478.144211173995,

            "yhat_upper": 1924.9953469610377

        },

        {

            "ds": "Fri, 27 Jun 2025 00:00:00 GMT",

            "yhat": -131.1172978148503,

            "yhat_lower": -1940.1735483710095,

            "yhat_upper": 1633.681533836038

        },

        {

            "ds": "Sat, 28 Jun 2025 00:00:00 GMT",

            "yhat": 225.19379986615922,

            "yhat_lower": -1441.620718872721,

            "yhat_upper": 2043.8360828693294

        },

        {

            "ds": "Sun, 29 Jun 2025 00:00:00 GMT",

            "yhat": -147.18366460719517,

            "yhat_lower": -1918.8307241825735,

            "yhat_upper": 1640.452827956244

        }

    ],

    "product": "Q.ADVAN Z",

    "total_forecast": -1261.98

}
